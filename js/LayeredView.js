// Generated by CoffeeScript 1.12.4
var Layer, LayeredView, Null, View, assertType, modx, type;

assertType = require("assertType");

View = require("modx/lib/View");

Null = require("Null");

modx = require("modx");

Layer = require("./Layer");

type = modx.Component("LayeredView");

type.defineStatics({
  Layer: Layer
});

type.defineValues(function() {
  return {
    _index: -1,
    _layers: [],
    _elements: []
  };
});

type.defineListeners(function() {
  if (this.props.layer instanceof AnimatedValue) {
    return this.props.layer.didSet((function(_this) {
      return function(layer, oldLayer) {
        assertType(layer, LayeredView.propTypes.layer);
        return _this._onLayerChange(layer, oldLayer);
      };
    })(this));
  }
});

type.defineGetters({
  layer: function() {
    var layer;
    if (layer = this.props.layer) {
      if (layer instanceof AnimatedValue) {
        return layer.get();
      } else {
        return layer;
      }
    } else {
      return null;
    }
  }
});

type.defineMethods({
  _onLayerChange: function(layer, oldLayer) {
    assertType(layer, LayeredView.propTypes.layer);
    if (layer === oldLayer) {
      return;
    }
    if (oldLayer) {
      oldLayer.hide();
    }
    if (layer === null) {
      this._index = -1;
      return;
    }
    if (layer.index === null) {
      layer._index = -1 + this._layers.push(layer);
      this._index = layer._index;
      this._elements.push(null);
      try {
        this.forceUpdate();
      } catch (error) {}
    } else {
      this._index = layer._index;
      layer.show();
    }
  }
});

type.defineProps({
  style: Style,
  layer: Layer.Kind.or(Null),
  layerStyle: Style,
  onUpdate: Function
});

type.render(function() {
  this._renderLayer(this._index, this.props.layerStyle);
  return View({
    style: this.props.style,
    children: this._elements
  });
});

type.willMount(function() {
  return this._onLayerChange(this.layer, null);
});

type.didUpdate(function() {
  var onUpdate;
  if (onUpdate = this.props.onUpdate) {
    onUpdate(this.layer);
  }
});

type.defineMethods({
  _renderLayer: function(index, style) {
    var base;
    if (index >= 0) {
      if ((base = this._elements)[index] == null) {
        base[index] = this._layers[index].render({
          style: style
        });
      }
    }
  }
});

module.exports = LayeredView = type.build();
